{"version":3,"sources":["colors.ts","components/App/Global.style.ts","database.ts","components/UI/UI.style.ts","components/StoryCreator/StoryCreator.style.ts","bresenham.ts","components/Drawing/Drawing.style.ts","components/Drawing/Drawing.tsx","components/Drawing/index.ts","components/PanelConnections/PanelConnections.style.ts","components/Thumbnail/Thumbnail.style.ts","components/Thumbnail/index.ts","components/Thumbnail/Thumbnail.tsx","components/PanelConnections/index.ts","components/PanelConnections/PanelConnections.tsx","components/StoryCreator/StoryCreator.tsx","components/StoryPlayer/StoryPlayer.style.ts","components/StoryPlayer/index.ts","components/StoryPlayer/StoryPlayer.tsx","components/App/index.ts","components/App/App.tsx","index.tsx"],"names":["colors","primary","primaryVariant","darken","secondary","lighten","secondaryVariant","GlobalStyle","createGlobalStyle","_templateObject","Colors","firebase","initializeApp","apiKey","appId","authDomain","databaseURL","messagingSenderId","projectId","storageBucket","database","ButtonBase","styled","button","withConfig","displayName","componentId","props","onClick","css","UI_style_templateObject","Button","RoundButton","Base","div","Row","Column","Wrapper","TextInput","textarea","bresenham","pointA","pointB","points","deltaX","x","deltaY","y","absDeltaY","Math","abs","absDeltaX","signX","signY","eps","push","DrawingImage","img","Canvas","canvas","viewBoxSize","height","width","Drawing","_ref","onChange","dataURL","_useState","useState","_useState2","Object","slicedToArray","context","setContext","_useState3","_useState4","setCanvas","_useState5","_useState6","isDrawing","setIsDrawing","_useState7","_useState8","prevPosition","setPrevPosition","draw","event","position","_canvas$getBoundingCl","getBoundingClientRect","left","top","viewBoxRatio","boundsRatio","scale","offset","floor","clientX","clientY","relativePoint","line","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","point","value","fillRect","err","return","toDataURL","startDrawing","stopDrawing","useEffect","fillStyle","image","Image","onload","drawImage","src","react_default","a","createElement","Drawing_style_Wrapper","ref","instance","getContext","onMouseMove","mouseEvent","onTouchMove","touchEvent","touches","onTouchStart","onMouseDown","onMouseUp","onTouchEnd","onMouseOut","PanelsWrapper","NewPannelText","common","Thumbnail_style_templateObject","ThumbnailImage","Placeholder","Thumbnail","PanelConnections","currentPanel","prevPanel","nextPanels","onConnectionClick","onNewPanelClick","PanelConnections_style_Wrapper","components_Thumbnail","map","panel","key","id","keys","toConsumableArray","Array","length","StoryCreator","selected","setSelected","nextIds","text","panels","setPanels","prevId","components_Drawing","prevPanels","newPanels","slice","objectSpread","target","placeholder","limitToLast","once","then","snapshot","val","serializedPanels","values","JSON","parse","data","stringify","components_PanelConnections","CurrentPanelColumn","PanelWrapper","PanelImage","PanelText","StoryPlayer","story","setStory","current","setCurrent","concat","StoryPlayer_style_Wrapper","alt","App","hot","Fragment","wouter","path","components_StoryCreator_StoryCreator","params","components_StoryPlayer","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.024bcaa7.chunk.js","sourcesContent":["import { darken, lighten } from 'polished'\r\n\r\nconst primary = '#1c4265'\r\nconst primaryVariant = darken(0.15, primary)\r\nconst secondary = lighten(0.5, primary)\r\nconst secondaryVariant = lighten(0.15, primary)\r\n\r\nexport default {\r\n  primary,\r\n  primaryVariant,\r\n  secondary,\r\n  secondaryVariant,\r\n}\r\n","import { createGlobalStyle } from 'styled-components'\r\n\r\nimport Colors from '../../colors'\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  body {\r\n    margin: 0;\r\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\r\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\r\n      sans-serif;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n    background: ${Colors.primary};\r\n  }\r\n\r\n  #root {\r\n    display: flex;\r\n    height: 100vh;\r\n  }\r\n\r\n  * {\r\n    user-select: none;\r\n  }\r\n`\r\n","import firebase from 'firebase/app'\r\nimport 'firebase/database'\r\n\r\nfirebase.initializeApp({\r\n  apiKey: 'AIzaSyC5mVxaorL_LmNWasC5LNmAC3cmlQ-5vFM',\r\n  appId: '1:105986550181:web:81ec40d053faad45',\r\n  authDomain: 'story-maker-85706.firebaseapp.com',\r\n  databaseURL: 'https://story-maker-85706.firebaseio.com',\r\n  messagingSenderId: '105986550181',\r\n  projectId: 'story-maker-85706',\r\n  storageBucket: 'story-maker-85706.appspot.com',\r\n})\r\n\r\nexport default firebase.database()\r\n","import styled, { css, FlattenSimpleInterpolation } from 'styled-components/macro'\r\n\r\nimport Colors from '../../colors'\r\n\r\nconst ButtonBase = styled.button`\r\n  all: unset;\r\n  background: ${Colors.secondaryVariant};\r\n  margin: 5px;\r\n  text-align: center;\r\n  border: solid 3px ${Colors.primary};\r\n\r\n  ${(props): FlattenSimpleInterpolation | undefined => props.onClick && css`\r\n    cursor: pointer;\r\n\r\n    border-color: ${Colors.primaryVariant};\r\n\r\n    :hover {\r\n      border-color: ${Colors.secondaryVariant};\r\n    }\r\n\r\n    :active {\r\n      background: ${Colors.primary};\r\n      border-color: ${Colors.primaryVariant};\r\n    }\r\n  `}\r\n`\r\n\r\nexport const Button = styled(ButtonBase)`\r\n  flex: 1;\r\n  border-radius: 5px;\r\n  padding: 7px;\r\n`\r\n\r\nexport const RoundButton = styled(ButtonBase)`\r\n  border-radius: 100%;\r\n  flex: unset;\r\n  overflow: hidden;\r\n  height: 80px;\r\n  width: 80px;\r\n\r\n  @media (orientation:portrait) {\r\n    height: 50px;\r\n    width: 50px;\r\n  }\r\n`\r\n\r\nconst Base = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n`\r\n\r\nexport const Row = styled(Base)``\r\n\r\nexport const Column = styled(Base)`\r\n  flex: 1;\r\n  flex-direction: column;\r\n`\r\n","import styled from 'styled-components/macro'\r\n\r\nimport Colors from '../../colors'\r\nimport { Row } from '../UI'\r\n\r\nexport const Wrapper = styled(Row)`\r\n  background: ${Colors.primary};\r\n  color: ${Colors.secondary};\r\n  flex: 1;\r\n\r\n  @media (orientation:portrait) {\r\n    flex-direction: column;\r\n  }\r\n`\r\n\r\nexport const TextInput = styled.textarea`\r\n  all: unset;\r\n  background: ${Colors.primaryVariant};\r\n  padding: 10px;\r\n  border-radius: 10px;\r\n  margin: 5px;\r\n  height: 55px;\r\n\r\n  ::placeholder {\r\n    color: ${Colors.secondaryVariant}\r\n  }\r\n`\r\n","function bresenham (pointA: Point, pointB: Point): Point[] {\r\n  const points: Point[] = []\r\n  const deltaX = pointB.x - pointA.x\r\n  const deltaY = pointB.y - pointA.y\r\n  const absDeltaY = Math.abs(deltaX)\r\n  const absDeltaX = Math.abs(deltaY)\r\n  const signX = deltaX > 0 ? 1 : -1\r\n  const signY = deltaY > 0 ? 1 : -1\r\n\r\n  let eps = 0\r\n\r\n  if (absDeltaY > absDeltaX) {\r\n    for (let x = pointA.x, y = pointA.y; signX < 0 ? x >= pointB.x : x <= pointB.x; x += signX) {\r\n      points.push({ x, y })\r\n      eps += absDeltaX\r\n      if ((eps << 1) >= absDeltaY) {\r\n        y += signY\r\n        eps -= absDeltaY\r\n      }\r\n    }\r\n  } else {\r\n    for (let x = pointA.x, y = pointA.y; signY < 0 ? y >= pointB.y : y <= pointB.y; y += signY) {\r\n      points.push({ x, y })\r\n      eps += absDeltaY\r\n      if ((eps << 1) >= absDeltaX) {\r\n        x += signX\r\n        eps -= absDeltaX\r\n      }\r\n    }\r\n  }\r\n  return points\r\n}\r\n\r\nexport default bresenham\r\n","import styled from 'styled-components/macro'\r\n\r\nimport Colors from '../../colors'\r\n\r\nexport const Wrapper = styled.div`\r\n  flex: 1;\r\n  background: ${Colors.secondaryVariant};\r\n  position: relative;\r\n  overflow: hidden;\r\n  margin: 5px;\r\n  border-radius: 10px;\r\n  overflow: hidden;\r\n`\r\n\r\nexport const DrawingImage = styled.img`\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: contain;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  image-rendering: pixelated;\r\n`\r\n\r\nexport const Canvas = styled.canvas`\r\n  cursor: crosshair;\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  opacity: 0;\r\n  touch-action: none;\r\n`\r\n","import React, {\r\n  useEffect,\r\n  useState,\r\n} from 'react'\r\nimport bresenham from '../../bresenham'\r\n\r\nimport Colors from '../../colors'\r\nimport {\r\n  Canvas,\r\n  DrawingImage,\r\n  Wrapper,\r\n} from './Drawing.style'\r\n\r\nconst viewBoxSize = {\r\n  height: 60,\r\n  width: 80,\r\n}\r\n\r\ninterface Props {\r\n  onChange: (dataURL: string) => void;\r\n  dataURL: string;\r\n}\r\n\r\nconst Drawing: React.FC<Props> = ({\r\n  onChange,\r\n  dataURL,\r\n}): React.ReactElement<Props> => {\r\n  const [context, setContext] = useState<CanvasRenderingContext2D>()\r\n  const [canvas, setCanvas] = useState<HTMLCanvasElement>()\r\n  const [isDrawing, setIsDrawing] = useState(false)\r\n  const [prevPosition, setPrevPosition] = useState<Point>()\r\n\r\n  useEffect((): void => {\r\n    if (!context || !canvas) {\r\n      return\r\n    }\r\n\r\n    if (!dataURL) {\r\n      context.fillStyle = Colors.secondary\r\n      context.fillRect(0, 0, canvas.width, canvas.height)\r\n\r\n      onChange(canvas.toDataURL())\r\n    }\r\n    context.fillStyle = Colors.primary\r\n\r\n    // When dataURL is updated, we update the canvas with the new image.\r\n    // But only when a new full image is being loaded, not when we are drawing.\r\n    if (!isDrawing) {\r\n      const image = new Image()\r\n      image.onload = (): void => context.drawImage(image, 0, 0)\r\n      image.src = dataURL\r\n    }\r\n  }, [context, canvas, dataURL, isDrawing, onChange])\r\n\r\n  function relativePoint (event: React.MouseEvent | React.Touch): Point {\r\n    if (!canvas) {\r\n      return { x: 0, y: 0 }\r\n    }\r\n\r\n    const {\r\n      width,\r\n      height,\r\n      left,\r\n      top,\r\n    } = canvas.getBoundingClientRect()\r\n\r\n    const viewBoxRatio = viewBoxSize.height / viewBoxSize.width\r\n    const boundsRatio = height / width\r\n\r\n    const scale = viewBoxRatio < boundsRatio\r\n      ? width / viewBoxSize.width\r\n      : height / viewBoxSize.height\r\n\r\n    const offset: Point = {\r\n      x: left,\r\n      y: top,\r\n    }\r\n\r\n    if (viewBoxRatio > boundsRatio) {\r\n      offset.x += (width - (viewBoxSize.width * scale)) / 2\r\n    } else {\r\n      offset.y += (height - (viewBoxSize.height * scale)) / 2\r\n    }\r\n\r\n    return {\r\n      x: Math.floor((event.clientX - offset.x) / scale),\r\n      y: Math.floor((event.clientY - offset.y) / scale),\r\n    }\r\n  }\r\n\r\n  function setCanvasRef (instance: HTMLCanvasElement | null): void {\r\n    if (!instance || canvas || context) { return }\r\n\r\n    setCanvas(instance)\r\n    setContext(instance.getContext('2d') || undefined)\r\n  }\r\n\r\n  function draw (event: React.MouseEvent | React.Touch): void {\r\n    if (!context || !canvas) { return }\r\n\r\n    const position: Point = relativePoint(event)\r\n    const line = bresenham(prevPosition || position, position)\r\n\r\n    for (const point of line) {\r\n      context.fillRect(point.x, point.y, 1, 1)\r\n    }\r\n\r\n    onChange(canvas.toDataURL())\r\n\r\n    setPrevPosition(position)\r\n  }\r\n\r\n  function handleMouseMove (mouseEvent: React.MouseEvent): void {\r\n    if (isDrawing) {\r\n      draw(mouseEvent)\r\n    }\r\n  }\r\n\r\n  function handleTouchMove (touchEvent: React.TouchEvent): void {\r\n    draw(touchEvent.touches[0])\r\n  }\r\n\r\n  function startDrawing (): void {\r\n    setIsDrawing(true)\r\n  }\r\n\r\n  function stopDrawing (): void {\r\n    setIsDrawing(false)\r\n    setPrevPosition(undefined)\r\n  }\r\n\r\n  function handleMouseDown (mouseEvent: React.MouseEvent): void {\r\n    startDrawing()\r\n    draw(mouseEvent)\r\n  }\r\n\r\n  function handleTouchStart (touchEvent: React.TouchEvent): void {\r\n    startDrawing()\r\n    draw(touchEvent.touches[0])\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      {dataURL && (\r\n        <DrawingImage src={dataURL} />\r\n      )}\r\n      <Canvas\r\n        ref={setCanvasRef}\r\n        onMouseMove={handleMouseMove}\r\n        onTouchMove={handleTouchMove}\r\n        onTouchStart={handleTouchStart}\r\n        onMouseDown={handleMouseDown}\r\n        onMouseUp={stopDrawing}\r\n        onTouchEnd={stopDrawing}\r\n        onMouseOut={stopDrawing}\r\n        width={viewBoxSize.width}\r\n        height={viewBoxSize.height}\r\n      />\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default Drawing\r\n","import Drawing from './Drawing'\r\nexport default Drawing\r\n","import styled from 'styled-components/macro'\r\n\r\nimport { Column, Row } from '../UI'\r\n\r\nexport const Wrapper = styled(Column)`\r\n  flex-direction: column;\r\n  margin: 10px;\r\n  display: flex;\r\n  flex: unset;\r\n\r\n  @media (orientation:portrait) {\r\n    flex-direction: row;\r\n  }\r\n`\r\n\r\nexport const PanelsWrapper = styled(Row)`\r\n  @media (orientation:portrait) {\r\n    flex-direction: column;\r\n  }\r\n  align-items: center;\r\n  justify-content: center;\r\n`\r\n\r\nexport const NewPannelText = styled.div`\r\n  margin-top: -22px;\r\n  font-size: 5em;\r\n\r\n  @media (orientation:portrait) {\r\n    font-size: 3.8em;\r\n  }\r\n`\r\n","import styled, { css } from 'styled-components/macro'\r\n\r\nimport Colors from '../../colors'\r\n\r\nconst common = css`\r\n  width: 100%;\r\n  height: 100%;\r\n`\r\n\r\nexport const ThumbnailImage = styled.img`\r\n  ${common}\r\n  flex: 1;\r\n`\r\n\r\nexport const Placeholder = styled.div`\r\n  ${common}\r\n  padding-bottom: 75%;\r\n  background-color: ${Colors.secondary};\r\n`\r\n","import Thumbnail from './Thumbnail'\r\nexport default Thumbnail\r\n","import React from 'react'\r\n\r\nimport {\r\n  Placeholder,\r\n  ThumbnailImage,\r\n} from './Thumbnail.style'\r\n\r\nconst Thumbnail: React.FC<{ src: string }> = ({ src }): React.ReactElement => (\r\n  src ? (\r\n    <ThumbnailImage src={src} />\r\n  ) : (\r\n    <Placeholder />\r\n  )\r\n)\r\n\r\nexport default Thumbnail\r\n","import PanelConnections from './PanelConnections'\r\nexport default PanelConnections\r\n","import React from 'react'\r\n\r\nimport {\r\n  NewPannelText,\r\n  PanelsWrapper,\r\n  Wrapper,\r\n} from './PanelConnections.style'\r\nimport { RoundButton } from '../UI'\r\nimport Thumbnail from '../Thumbnail'\r\n\r\nconst MAX_NEXT_PANELS = 2\r\n\r\nconst PanelConnections: React.FC<{\r\n  prevPanel?: Panel;\r\n  currentPanel: Panel;\r\n  nextPanels: Panel[];\r\n  onConnectionClick: (panel: Panel) => void;\r\n  onNewPanelClick: () => void;\r\n}> = ({\r\n  currentPanel,\r\n  prevPanel,\r\n  nextPanels,\r\n  onConnectionClick,\r\n  onNewPanelClick,\r\n}): React.ReactElement => (\r\n  <Wrapper>\r\n    {prevPanel && (\r\n      <PanelsWrapper>\r\n        <RoundButton onClick={(): void => onConnectionClick(prevPanel)}>\r\n          <Thumbnail src={prevPanel.dataURL} />\r\n        </RoundButton>\r\n      </PanelsWrapper>\r\n    )}\r\n    {!prevPanel && (\r\n      <PanelsWrapper>\r\n        <RoundButton />\r\n      </PanelsWrapper>\r\n    )}\r\n    <PanelsWrapper>\r\n      <RoundButton>\r\n        <Thumbnail src={currentPanel.dataURL} />\r\n      </RoundButton>\r\n    </PanelsWrapper>\r\n    <PanelsWrapper>\r\n      {nextPanels.map((panel): React.ReactElement => (\r\n        <RoundButton\r\n          key={panel.id}\r\n          onClick={(): void => onConnectionClick(panel)}\r\n        >\r\n          <Thumbnail src={panel.dataURL} />\r\n        </RoundButton>\r\n      ))}\r\n      {\r\n        // Generate an array of numbers from 0 to MAX_NEXT_PANELS\r\n        Object.keys([...Array(MAX_NEXT_PANELS - nextPanels.length)])\r\n          .map((panel): React.ReactElement => (\r\n            <RoundButton\r\n              key={panel}\r\n              onClick={onNewPanelClick}\r\n            >\r\n              <NewPannelText>+</NewPannelText>\r\n            </RoundButton>\r\n          ))\r\n      }\r\n    </PanelsWrapper>\r\n  </Wrapper>\r\n)\r\n\r\nexport default PanelConnections\r\n","import React, {\r\n  useState,\r\n} from 'react'\r\n\r\nimport database from '../../database'\r\nimport {\r\n  TextInput,\r\n  Wrapper,\r\n} from './StoryCreator.style'\r\nimport {\r\n  Button,\r\n  Column,\r\n  Row,\r\n} from '../UI'\r\nimport Drawing from '../Drawing'\r\nimport PanelConnections from '../PanelConnections'\r\n\r\nconst StoryCreator: React.FC = (): React.ReactElement => {\r\n  const [selected, setSelected] = useState<number>(0)\r\n  const [panels, setPanels] = useState<Panel[]>([{\r\n    dataURL: '',\r\n    id: 0,\r\n    nextIds: [],\r\n    text: '',\r\n  }])\r\n\r\n  const currentPanel = panels[selected]\r\n  const prevPanel = (currentPanel.prevId !== undefined) ? panels[currentPanel.prevId] : undefined\r\n  const nextPanels = currentPanel.nextIds.map((id): Panel => panels[id])\r\n\r\n  function handlePublishClick (): void {\r\n    const data: SerializedData = {\r\n      panels: panels.map((panel): SerializedPanel => ({\r\n        dataURL: panel.dataURL,\r\n        id: panel.id,\r\n        nextIds: JSON.stringify(panel.nextIds),\r\n        text: panel.text,\r\n        ...(panel.prevId !== undefined ? { prevId: panel.prevId } : {}),\r\n      })),\r\n    }\r\n\r\n    database.ref('stories').push(data)\r\n  }\r\n\r\n  function handleTextChange (event: React.ChangeEvent<HTMLTextAreaElement>): void {\r\n    const newPanels = panels.slice(0)\r\n    newPanels[selected] = {\r\n      ...newPanels[selected],\r\n      text: event.target.value,\r\n    }\r\n\r\n    setPanels(newPanels)\r\n  }\r\n\r\n  function handleLoadClick (): void {\r\n    database.ref('stories').limitToLast(1).once('value').then((snapshot): void => {\r\n      const val = snapshot.val()\r\n      if (!val) { return }\r\n\r\n      const serializedPanels = Object.values<SerializedData>(val)[0].panels\r\n\r\n      setPanels(serializedPanels.map((panel): Panel => ({\r\n        dataURL: panel.dataURL,\r\n        id: panel.id,\r\n        nextIds: JSON.parse(panel.nextIds),\r\n        prevId: panel.prevId,\r\n        text: panel.text,\r\n      })))\r\n    })\r\n  }\r\n\r\n  function handleNewPanelClick (): void {\r\n    setPanels((prevPanels): Panel[] => {\r\n      const newPanels = prevPanels.slice(0)\r\n\r\n      newPanels[selected].nextIds.push(newPanels.length)\r\n      newPanels.push({\r\n        dataURL: '',\r\n        id: newPanels.length,\r\n        nextIds: [],\r\n        prevId: selected,\r\n        text: '',\r\n      })\r\n\r\n      return newPanels\r\n    })\r\n  }\r\n\r\n  function handleCanvasChange (dataURL: string): void {\r\n    setPanels((prevPanels): Panel[] => {\r\n      const newPanels = prevPanels.slice(0)\r\n      newPanels[selected] = {\r\n        ...newPanels[selected],\r\n        dataURL,\r\n      }\r\n      return newPanels\r\n    })\r\n  }\r\n\r\n  function handlePanelConnectionClick (panel: Panel): void {\r\n    setSelected(panel.id)\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Column>\r\n        <Drawing\r\n          onChange={handleCanvasChange}\r\n          dataURL={currentPanel.dataURL}\r\n        />\r\n        <TextInput\r\n          onChange={handleTextChange}\r\n          value={currentPanel.text}\r\n          placeholder=\"Insert panel text here\"\r\n        />\r\n        <Row>\r\n          <Button onClick={handleLoadClick}>Load</Button>\r\n          <Button onClick={handlePublishClick}>Save</Button>\r\n        </Row>\r\n      </Column>\r\n      <PanelConnections\r\n        prevPanel={prevPanel}\r\n        currentPanel={currentPanel}\r\n        nextPanels={nextPanels}\r\n        onConnectionClick={handlePanelConnectionClick}\r\n        onNewPanelClick={handleNewPanelClick}\r\n      />\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default StoryCreator\r\n","import styled from 'styled-components/macro'\r\n\r\nimport Colors from '../../colors'\r\nimport {\r\n  Row,\r\n  Column,\r\n} from '../UI'\r\n\r\nexport const Wrapper = styled(Row)`\r\n  width: 100%;\r\n  padding: 10px;\r\n`\r\n\r\nexport const CurrentPanelColumn = styled(Column)`\r\n  flex: 2;\r\n`\r\n\r\nexport const PanelWrapper = styled.div`\r\n  margin: 10px;\r\n  border: solid 5px ${Colors.primaryVariant};\r\n  border-radius: 10px;\r\n  overflow: hidden;\r\n`\r\n\r\nexport const PanelImage = styled.img`\r\n  width: 100%;\r\n  image-rendering: pixelated;\r\n  display: block;\r\n`\r\n\r\nexport const PanelText = styled.div`\r\n  background: ${Colors.primaryVariant};\r\n  padding: 10px;\r\n  color: ${Colors.secondary};\r\n`\r\n","import StoryPlayer from './StoryPlayer'\r\nexport default StoryPlayer\r\n","import React, {\r\n  useState,\r\n  useEffect,\r\n} from 'react'\r\n\r\nimport {\r\n  PanelImage,\r\n  Wrapper,\r\n  PanelWrapper,\r\n  CurrentPanelColumn,\r\n  PanelText,\r\n} from './StoryPlayer.style'\r\nimport { Column } from '../UI'\r\nimport database from '../../database'\r\n\r\ninterface Props {\r\n  id?: string;\r\n}\r\n\r\nconst StoryPlayer: React.FC<Props> = ({ id }): React.ReactElement => {\r\n  const [story, setStory] = useState<Story>()\r\n  const [current, setCurrent] = useState<number>(0)\r\n  const currentPanel = story ? story.panels[current] : undefined\r\n\r\n  useEffect((): void => {\r\n    database.ref(`stories/${id}`).once('value').then((snapshot): void => {\r\n      const val: SerializedData = snapshot.val()\r\n      if (!val) { return }\r\n\r\n      setStory({\r\n        panels: val.panels.map((panel): Panel => ({\r\n          dataURL: panel.dataURL,\r\n          id: panel.id,\r\n          nextIds: JSON.parse(panel.nextIds),\r\n          prevId: panel.prevId,\r\n          text: panel.text,\r\n        })),\r\n      })\r\n    })\r\n  }, [id])\r\n\r\n  return (\r\n    <Wrapper>\r\n      {currentPanel && (\r\n        <CurrentPanelColumn>\r\n          <PanelWrapper>\r\n            <PanelImage\r\n              src={currentPanel.dataURL}\r\n              alt={currentPanel.text}\r\n            />\r\n            <PanelText>\r\n              {currentPanel.text}\r\n            </PanelText>\r\n          </PanelWrapper>\r\n        </CurrentPanelColumn>\r\n      )}\r\n      <Column>\r\n        {story && currentPanel && currentPanel.nextIds.map((id): React.ReactElement => (\r\n          <PanelWrapper key={id}>\r\n            <PanelImage\r\n              src={story.panels[id].dataURL}\r\n              alt={story.panels[id].text}\r\n              onClick={(): void => setCurrent(id)}\r\n            />\r\n            <PanelText>\r\n              {story.panels[id].text}\r\n            </PanelText>\r\n          </PanelWrapper>\r\n        ))}\r\n      </Column>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default StoryPlayer\r\n","import App from './App'\r\nexport default App\r\n","import React from 'react'\r\nimport { hot } from 'react-hot-loader/root'\r\nimport { Route, Router, PushCallback } from 'wouter'\r\nimport useLocation from 'wouter/use-location'\r\n\r\nimport { GlobalStyle } from './Global.style'\r\nimport StoryCreator from '../StoryCreator/StoryCreator'\r\nimport StoryPlayer from '../StoryPlayer'\r\n\r\nconst makeUseBasepathLocation = (basepath: string): () => [string, PushCallback] => (): [string, PushCallback] => {\r\n  const [location, setLocation] = useLocation()\r\n\r\n  // could be done with regexp, but requires proper escaping\r\n  const normalized = location.startsWith(basepath)\r\n    ? location.slice(basepath.length)\r\n    : location\r\n\r\n  return [normalized, (to): void => setLocation(basepath + to)]\r\n}\r\n\r\nconst App: React.FC = hot((): React.ReactElement => (\r\n  <>\r\n    <GlobalStyle/>\r\n    <Route path=\"/\">\r\n      <StoryCreator />\r\n    </Route>\r\n    <Route path=\"/story/:id\">\r\n      {(params): React.ReactElement => (\r\n        <StoryPlayer id={params ? params.id : undefined} />\r\n      )}\r\n    </Route>\r\n  </>\r\n))\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport App from './components/App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}