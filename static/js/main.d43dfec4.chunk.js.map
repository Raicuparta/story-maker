{"version":3,"sources":["Colors.ts","UI.ts","DrawingSVG.style.ts","DrawingSVG.tsx","Drawing.style.ts","Drawing.tsx","DrawArea.style.ts","DrawArea.tsx","FlowChart.style.ts","FlowChart.tsx","Home.style.ts","Home.tsx","index.style.ts","index.tsx"],"names":["Colors","primary","primaryVariant","darken","secondary","lighten","secondaryVariant","Button","styled","button","withConfig","displayName","componentId","Row","div","Column","Path","path","SVG","svg","viewBoxSize","DrawingLine","_ref2","pathData","line","map","p","concat","x","y","join","react_default","a","createElement","d","Drawing","_ref","lines","viewBox","preserveAspectRatio","width","height","fill","index","DrawingSVG_DrawingLine","key","Wrapper","onMouseDown","onInputDown","onMouseMove","onInputMove","_useState","useState","_useState2","Object","slicedToArray","isDrawing","setIsDrawing","drawingRef","useRef","handleMouseUp","relativePoint","event","_getBoundingClientRec","current","getBoundingClientRect","left","top","scale","offset","clientX","clientY","useEffect","document","addEventListener","removeEventListener","downCallbacks","mouseEvent","preventDefault","onTouchStart","touchEvent","touches","moveCallbacks","onTouchMove","assign","ref","DrawingSVG","DrawArea","onChange","DrawArea_style_Wrapper","src_Drawing","point","toConsumableArray","slice","length","Node","isSelected","css","_templateObject","Preview","TextPreview","PanelPreview","panel","drawing","text","FlowChart","panels","selected","onNodeClick","hoverIndex","setHoverIndex","FlowChart_style_Wrapper","Fragment","onClick","onMouseEnter","onMouseLeave","FlowChart_PanelPreview","TextInput","textarea","DrawColumn","Home","setDrawing","_useState3","_useState4","setText","_useState5","_useState6","setSelected","_useState7","_useState8","setPanels","localStorage","setItem","JSON","stringify","Home_style_Wrapper","src_DrawArea","target","value","placeholder","savedPanels","getItem","parse","prevPanels","newPanels","src_FlowChart","GlobalStyle","createGlobalStyle","index_style_templateObject","ReactDOM","render","src_Home","getElementById"],"mappings":"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","file":"static/js/main.d43dfec4.chunk.js","sourcesContent":["import { darken, lighten } from 'polished';\n\nconst primary = '#735535';\nconst primaryVariant = darken(0.15, primary);\nconst secondary = lighten(0.5, primary);\nconst secondaryVariant = lighten(0.15, primary);\n\nexport default {\n  primary,\n  primaryVariant,\n  secondary,\n  secondaryVariant,\n}\n","import styled from 'styled-components/macro';\n\nimport Colors from './Colors';\n\nexport const Button = styled.button`\n  all: unset;\n  flex: 1;\n  padding: 7px;\n  background: ${Colors.secondaryVariant};\n  border-radius: 5px;\n  margin: 5px;\n  text-align: center;\n  cursor: pointer;\n  border: solid 3px ${Colors.secondaryVariant};\n  \n  :hover {\n    background: ${Colors.primary};\n  }\n  \n  :active {\n    border-color: ${Colors.primaryVariant};\n  }\n`;\n\nexport const Row = styled.div`\n  display: flex;\n`;\n\nexport const Column = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n`;\n","import styled from 'styled-components/macro';\n\nimport Colors from './Colors';\n\nexport const Path = styled.path`\n  fill: none;\n  stroke-width: 5px;\n  stroke: ${Colors.primaryVariant};\n  stroke-linejoin: round;\n  stroke-linecap: round;\n`\n\nexport const SVG = styled.svg`\n  width: 100%;\n  height: 100%;\n`","import React from 'react';\n\nimport Colors from './Colors';\nimport {\n  SVG,\n  Path,\n} from './DrawingSVG.style';\n\nconst viewBoxSize = {\n  width: 400,\n  height: 300,\n};\n\nconst Drawing: React.FC<{\n  lines: LinePath,\n}> = ({\n  lines,\n}) => {\n  return (\n    <SVG\n      viewBox={`0 0 ${viewBoxSize.width} ${viewBoxSize.height}`}\n      preserveAspectRatio=\"xMidYMid meet\"\n    >\n      <rect width=\"100%\" height=\"100%\" fill={Colors.secondary}/>\n      {lines.map((line, index) => (\n        <DrawingLine\n          key={index}\n          line={line}\n        />\n      ))}\n    </SVG>\n  );\n};\n\nconst DrawingLine: React.FC<{ line: Line }> = ({ line }) => {\n  const pathData = \"M \" +\n    line\n      .map(p => {\n        return `${p.x} ${p.y}`;\n      })\n      .join(\" L \");\n\n  return <Path d={pathData} />;\n}\nexport default Drawing;","import styled from 'styled-components/macro';\n\nexport const Wrapper = styled.div`\n  flex: 1;\n  touch-action: none;\n`\n","import React, { useState, useEffect, useRef } from 'react';\n\nimport DrawingSVG from './DrawingSVG';\nimport { Wrapper } from './Drawing.style';\n\nconst viewBoxSize = {\n  width: 400,\n  height: 300,\n};\n\nconst Drawing: React.FC<{\n  onInputDown?: (point: Point) => void,\n  onInputMove?: (point: Point) => void,\n  isDrawing?: boolean,\n  lines: LinePath,\n}> = ({\n  onInputDown: onMouseDown,\n  onInputMove: onMouseMove,\n  lines,\n}) => {\n  const [isDrawing, setIsDrawing] = useState(false);\n  const drawingRef = useRef<HTMLDivElement>(null);\n\n  function handleMouseDown(mouseEvent: React.MouseEvent) {\n    mouseEvent.preventDefault();\n    setIsDrawing(true);\n    mouseEvent.button === 0 && onMouseDown!(relativePoint(mouseEvent));\n  }\n\n  function handleMouseMove(mouseEvent: React.MouseEvent) {\n    mouseEvent.preventDefault();\n    onMouseMove!(relativePoint(mouseEvent));\n  }\n\n  function handleTouchStart(touchEvent: React.TouchEvent) {\n    touchEvent.preventDefault();\n    setIsDrawing(true);\n    onMouseDown!(relativePoint(touchEvent.touches[0]));\n  }\n\n  function handleTouchMove(touchEvent: React.TouchEvent) {\n    touchEvent.preventDefault();\n    onMouseMove!(relativePoint(touchEvent.touches[0]));\n  }\n\n  function handleMouseUp() {\n    setIsDrawing(false);\n  }\n\n  useEffect(() => {\n    document.addEventListener(\"mouseup\", handleMouseUp);\n    return () => {\n      document.removeEventListener(\"mouseup\", handleMouseUp);\n    };\n  });\n\n  function relativePoint(event: React.MouseEvent | React.Touch) : Point {\n    const {\n      width,\n      height,\n      left,\n      top,\n    } = drawingRef!.current!.getBoundingClientRect();\n\n    const viewBoxRatio = viewBoxSize.height / viewBoxSize.width;\n    const boundsRatio = height / width;\n\n    const scale = viewBoxRatio < boundsRatio\n      ? width / viewBoxSize.width\n      : height / viewBoxSize.height\n\n    const offset = {\n      x: 0,\n      y: 0,\n    };\n    \n    if (width > height) {\n      offset.x += (width - (viewBoxSize.width * scale)) / 2;\n    } else {\n      offset.y += (height - (viewBoxSize.height * scale)) / 2;\n    }\n\n    return {\n      x: (event.clientX - offset.x) / scale - left,\n      y: (event.clientY - offset.y) / scale - top,\n    };\n  }\n\n  const downCallbacks = (onMouseDown && onMouseMove) ? {\n    onMouseDown: handleMouseDown,\n    onTouchStart: handleTouchStart,\n  } : {};\n  \n  const moveCallbacks = (isDrawing && onMouseDown && onMouseMove) ? {\n    onMouseMove: handleMouseMove,\n    onTouchMove: handleTouchMove,\n  } : {}\n\n  return (\n    <Wrapper\n      {...downCallbacks}\n      {...moveCallbacks}\n      ref={drawingRef}\n    >\n      <DrawingSVG lines={lines} />\n    </Wrapper>\n  );\n};\n\nexport default Drawing;","import styled from 'styled-components/macro';\n\nimport Colors from './Colors';\n\nexport const Wrapper = styled.div`\n  margin: 5px 5px 0 5px;\n  overflow: hidden;\n  cursor: crosshair;\n  display: flex;\n  justify-content: center;\n  flex: 1;\n  background: ${Colors.secondaryVariant};\n  border-radius: 10px 10px 0 0;\n`\n","import React from 'react';\n\nimport Drawing from './Drawing';\nimport { Wrapper } from './DrawArea.style';\n\nconst DrawArea: React.FC<{\n  lines: LinePath,\n  onChange: (lines: LinePath) => void,\n}> = ({\n  lines,\n  onChange,\n}) => {\n  function handleInputDown(point: Point) {\n    onChange(lines.concat([[point]]))\n  }\n\n  function handleInputMove(point: Point) {\n    onChange([\n      ...lines.slice(0, lines.length - 1),\n      lines[lines.length - 1].concat([point]),\n    ]);\n  }\n\n  return (\n    <Wrapper>\n      <Drawing\n        onInputDown={handleInputDown}\n        onInputMove={handleInputMove}\n        lines={lines}\n      />\n    </Wrapper>\n\n  );\n}\n\nexport default DrawArea;\n","import styled, { css } from 'styled-components/macro';\n\nimport Colors from './Colors';\n\nexport const Wrapper = styled.div`\n  border: 3px solid ${Colors.secondaryVariant};\n  border-radius: 5px;\n  margin: 5px;\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 10px;\n`\n\nexport const Node = styled.div<{ isSelected: boolean }>`\n  width: 20px;\n  height: 20px;\n  background: ${Colors.secondary};\n  border-radius: 100%;\n  border: 5px solid ${Colors.primary};\n  cursor: pointer;\n\n  :hover {\n    border-color: ${Colors.secondaryVariant};\n  }\n\n  ${({ isSelected }) => isSelected && css`\n    border-color: ${Colors.primaryVariant};\n    :hover {\n      border-color: ${Colors.primaryVariant};\n    }\n  `}\n`\nexport const Preview = styled.div`\n  border-radius: 5px;\n  border: 5px solid ${Colors.secondaryVariant};\n  overflow: hidden;\n  width: fit-content;\n  position: relative;\n  right: 122px;\n  bottom: 5px;\n  width: 100px;\n`\n\nexport const TextPreview = styled.div`\n  font-size: 10px;\n  height: 10px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  background: ${Colors.primaryVariant};\n  padding: 5px;\n`\n","import React, { useState } from 'react';\n\nimport DrawingSVG from './DrawingSVG';\nimport {\n  Wrapper,\n  Node,\n  TextPreview,\n  Preview,\n} from './FlowChart.style';\n\nconst FlowChart: React.FC<{\n  panels: Panel[],\n  selected: number,\n  onNodeClick: (panel: Panel, index: number) => void,\n}> = ({\n  panels,\n  selected,\n  onNodeClick,\n}) => {\n  const [hoverIndex, setHoverIndex] = useState<number>(-1);\n\n  return (\n    <Wrapper>\n      {panels.map((panel, index) => (\n        <React.Fragment key={index}>\n          <Node\n            isSelected={selected === index}\n            onClick={() => onNodeClick(panel, index)}\n            onMouseEnter={() => setHoverIndex(index)}\n            onMouseLeave={() => setHoverIndex(-1)}\n          >\n            {hoverIndex === index && selected !== index && (\n              <PanelPreview panel={panel} />\n            )}\n          </Node>\n        </React.Fragment>\n      ))}\n    </Wrapper>\n  )\n};\n\nconst PanelPreview: React.FC<{\n  panel: Panel,\n}> = ({ panel }) => (\n  <Preview>\n    <DrawingSVG lines={panel.drawing}/>\n    <TextPreview>{panel.text}</TextPreview>\n  </Preview>\n);\n\nexport default FlowChart;","import styled from 'styled-components/macro';\n\nimport Colors from './Colors';\nimport { Row, Column } from './UI';\n\nexport const Wrapper = styled(Row)`\n  background: ${Colors.primary};\n  color: ${Colors.secondary};\n  flex: 1;\n\n  @media (orientation:portrait) {\n    flex-direction: column;\n  }\n`;\n\nexport const TextInput = styled.textarea`\n  all: unset;\n  background: ${Colors.primaryVariant};\n  padding: 10px;\n  border-radius: 0 0 10px 10px;\n  margin: 0 5px 5px 5px;\n  height: 55px;\n\n  ::placeholder {\n    color: ${Colors.secondaryVariant}\n  }\n`;\n\nexport const DrawColumn = styled(Column)`\n  flex: 2;\n`;\n","import React, { useState, useEffect } from 'react';\n\nimport {\n  Row,\n  Column,\n  Button,\n} from './UI';\nimport DrawArea from './DrawArea';\nimport FlowChart from './FlowChart';\nimport {\n  Wrapper,\n  TextInput,\n  DrawColumn,\n} from './Home.style';\n\nconst Home: React.FC = () => {\n  const [drawing, setDrawing] = useState<LinePath>([]);\n  const [text, setText] = useState<string>('');\n  const [selected, setSelected] = useState<number>(0);\n  const [panels, setPanels] = useState<Panel[]>([{\n    drawing: [],\n    text: '',\n  }]);\n\n  function handleSaveClick() {\n    setPanels(prevPanels => {\n      const newPanels = prevPanels.slice(0);\n      newPanels[selected] = { drawing, text };\n      return newPanels;\n    });\n  }\n\n  function handleTextChange(event: React.ChangeEvent<HTMLTextAreaElement>) {\n    setText(event.target.value);\n  }\n\n  function handleAddChoiceClick() {\n    // TODO remove this\n    // Loading from local storage to make development easier.\n    // Nothing to do with adding choices, just using the\n    // button for convenience.\n    const savedPanels = localStorage.getItem('panels');\n    if (!savedPanels) return;\n    setPanels(JSON.parse(savedPanels));\n  }\n\n  function handleNodeClick(panel: Panel, index: number) {\n    setSelected(index);\n  }\n\n  function handleNewClick() {\n    setPanels(prevPanels => [\n      ...prevPanels,\n      {\n        drawing: [],\n        text: '',\n      },\n    ]);\n  }\n\n  useEffect(() => {\n    setSelected(panels.length - 1);\n  }, [panels.length]);\n\n  useEffect(() => {\n    setDrawing(panels[selected].drawing);\n    setText(panels[selected].text);\n  }, [panels, selected]);\n\n  useEffect(() => {\n    // TODO remove this\n    // Saving to local storage to make development easier\n    if (panels.length <= 1) return;\n    localStorage.setItem('panels', JSON.stringify(panels));\n  }, [panels]);\n\n  return (\n    <Wrapper>\n      <DrawColumn>\n        <DrawArea\n          lines={drawing}\n          onChange={setDrawing}\n        />\n        <TextInput\n          onChange={handleTextChange}\n          value={text}\n          placeholder=\"Insert panel text here...\"\n        />\n        <Row>\n          <Button onClick={handleAddChoiceClick}>Add Choice</Button>\n          <Button onClick={handleSaveClick}>Save Panel</Button>\n        </Row>\n      </DrawColumn>\n      <Column>\n        <Row>\n          <Button>Delete Panel</Button>\n          <Button onClick={handleNewClick}>New Panel</Button>\n        </Row>\n        <FlowChart\n          panels={panels}\n          onNodeClick={handleNodeClick}\n          selected={selected}\n        />\n      </Column>\n    </Wrapper>\n  )\n}\n\nexport default Home;","import { createGlobalStyle } from 'styled-components'\n\nimport Colors from './Colors';\n\nexport const GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    background: ${Colors.primary};\n  }\n\n  #root {\n    display: flex;\n    height: 100vh;\n  }\n`;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Home from './Home';\nimport { GlobalStyle } from './index.style';\n\nReactDOM.render(\n  <>\n    <GlobalStyle/>\n    <Home />\n  </>\n, document.getElementById('root'));\n"],"sourceRoot":""}